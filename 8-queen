def solve_queens(n):
    board = [-1] * n  # board[i] = column position of queen in row i
    result = []

    def is_valid(row, col):
        for i in range(row):
            if board[i] == col or abs(row - i) == abs(col - board[i]):
                return False
        return True

    def backtrack(row):
        if row == n:
            result.append(list(board))  # Store a copy of the solution
            return
        for col in range(n):
            if is_valid(row, col):
                board[row] = col
                backtrack(row + 1)
                board[row] = -1  # Backtrack

    backtrack(0)
    return result

# Solve for 8-queens
solutions = solve_queens(8)

# Print all solutions
for idx, solution in enumerate(solutions, 1):
    print(f"Solution {idx}:")
    for row in range(8):
        line = ""
        for col in range(8):
            line += "Q " if solution[row] == col else "- "
        print(line)
    print("\n")
