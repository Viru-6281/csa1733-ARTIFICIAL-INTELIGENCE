import heapq

# Define the goal state
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the empty tile

# Directions: up, down, left, right
DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def manhattan_distance(state):
    """Calculate the total Manhattan distance for a puzzle state."""
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = divmod(val - 1, 3)
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

def get_neighbors(state):
    """Return the list of neighboring states."""
    neighbors = []
    # Find the empty tile
    x, y = next((i, j) for i in range(3) for j in range(3) if state[i][j] == 0)
    
    for dx, dy in DIRECTIONS:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def is_goal(state):
    return state == GOAL_STATE

def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

def print_path(path):
    print("\n--- Solution Path ---")
    for step in path:
        for row in step:
            print(row)
        print()

def solve_puzzle(start_state):
    """Solves the 8-puzzle problem using A* search."""
    frontier = []
    heapq.heappush(frontier, (manhattan_distance(start_state), 0, start_state, [start_state]))
    visited = set()
    
    while frontier:
        estimated_cost, cost_so_far, current_state, path = heapq.heappop(frontier)
        state_key = state_to_tuple(current_state)
        
        if state_key in visited:
            continue
        visited.add(state_key)

        if is_goal(current_state):
            print("Solution found in", cost_so_far, "moves.")
            print_path(path)
            return

        for neighbor in get_neighbors(current_state):
            if state_to_tuple(neighbor) not in visited:
                new_cost = cost_so_far + 1
                est_total_cost = new_cost + manhattan_distance(neighbor)
                heapq.heappush(frontier, (est_total_cost, new_cost, neighbor, path + [neighbor]))
    
    print("No solution found.")

# Example: input an initial state
initial_state = [[1, 2, 3],
                 [4, 0, 6],
                 [7, 5, 8]]

solve_puzzle(initial_state)
